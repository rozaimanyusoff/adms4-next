import { jsPDF } from 'jspdf';

// Shared helpers for PDF header/footer and page-break handling
export async function addHeaderFooter(doc: any, pageNumber: number, totalPages: number, pageWidth: number) {
    // Add header logo if available
    const logoUrl = process.env.NEXT_PUBLIC_BRAND_LOGO_LIGHT;
    if (logoUrl) {
        try {
            const response = await fetch(logoUrl);
            const blob = await response.blob();
            const reader = new FileReader();
            const base64Promise = new Promise<string>((resolve, reject) => {
                reader.onloadend = () => resolve(reader.result as string);
                reader.onerror = reject;
            });
            reader.readAsDataURL(blob);
            const base64 = await base64Promise;
            doc.addImage(base64, 'PNG', pageWidth - 32, 14, 18, 28);
        } catch (e) {
            // continue without logo
        }
    }

    // Footer logo if available
    const footerLogoUrl = process.env.NEXT_PUBLIC_REPORT_FOOTER_LOGO;
    if (footerLogoUrl) {
        try {
            const response = await fetch(footerLogoUrl);
            const blob = await response.blob();
            const reader = new FileReader();
            const base64Promise = new Promise<string>((resolve, reject) => {
                reader.onloadend = () => resolve(reader.result as string);
                reader.onerror = reject;
            });
            reader.readAsDataURL(blob);
            const base64 = await base64Promise;
            const imgWidth = 205;
            const imgHeight = 26;
            const x = (pageWidth - imgWidth) / 4;
            const pageHeight = doc.internal.pageSize.getHeight();
            doc.addImage(base64, 'PNG', x, pageHeight - imgHeight - 2, imgWidth, imgHeight);
        } catch (e) {
            // continue without footer logo
        }
    }

    // Generated by text and page number
    try {
        doc.setFont('helvetica', 'italic');
        doc.setFontSize(8);
        const pageHeight = doc.internal.pageSize.getHeight();
        doc.text('This document is generated by ADMS4', pageWidth / 2, pageHeight - 35, { align: 'center' });

        doc.setFont('helvetica', 'bold');
        doc.setFontSize(8);
        doc.text(`Page ${pageNumber} of ${totalPages}`, pageWidth / 2, pageHeight - 5, { align: 'center' });
    } catch (e) {
        // Defensive: ignore any footer rendering errors
    }
}

// Height (y) reserved for header content (logo + top spacing).
export const HEADER_TOP_Y = 48; // approximate Y position below header where page content should start

// After adding a new page, call this to reset the y position to below the header
export function startYAfterNewPage(doc: any) {
    // Keep consistent with the header top spacing used when rendering header
    return HEADER_TOP_Y;
}

export function determineStatementLabel(d: any) {
    // 1) direct month/year fields
    if (d?.stmt_month && d?.stmt_year) {
        const m = String(d.stmt_month);
        const y = String(d.stmt_year);
        const monthNum = Number(m);
        if (!isNaN(monthNum) && monthNum >= 1 && monthNum <= 12) {
            const dt = new Date(y as any, monthNum - 1, 1);
            return `${dt.toLocaleString('default', { month: 'long' }).toUpperCase()} ${dt.getFullYear()}`;
        }
        return `${m.toUpperCase()} ${y}`;
    }
    // 2) month name field
    if (d?.stmt_month_name && d?.stmt_year) {
        return `${String(d.stmt_month_name).toUpperCase()} ${String(d.stmt_year)}`;
    }
    // 3) stmt_period or stmt_label
    if (d?.stmt_period) return String(d.stmt_period).toUpperCase();
    if (d?.stmt_label) return String(d.stmt_label).toUpperCase();
    // 4) try date ranges (from/to)
    const from = d?.stmt_from || d?.from || d?.period_from || null;
    const to = d?.stmt_to || d?.to || d?.period_to || null;
    const pickDate = to || from;
    if (pickDate) {
        const dt = new Date(pickDate);
        if (!isNaN(dt.getTime())) return `${dt.toLocaleString('default', { month: 'long' }).toUpperCase()} ${dt.getFullYear()}`;
    }
    // 5) fallback to last month
    const last = new Date();
    last.setMonth(last.getMonth() - 1);
    return `${last.toLocaleString('default', { month: 'long' }).toUpperCase()} ${last.getFullYear()}`;
}

export function ensurePageBreakForSignatures(doc: any, y: number, options?: { signaturesHeight?: number; bottomMargin?: number; newPageTopMargin?: number }) {
    const signaturesHeight = options?.signaturesHeight ?? 60;
    const bottomMargin = options?.bottomMargin ?? 40;
    const newPageTopMargin = options?.newPageTopMargin ?? HEADER_TOP_Y;
    const currentPageHeight = doc.internal.pageSize.getHeight();
    if (y + signaturesHeight > currentPageHeight - bottomMargin) {
        doc.addPage();
        // When we add a new page, return a starting y that is below the header/logo
        return newPageTopMargin;
    }
    return y;
}
